
import { defineConfig } from 'vitepress'

export default defineConfig({
    title: "算法库",
    description: "面试必冲算法库",
    base: '/algorithm/',
    appearance: true,
    lastUpdated: true,
    ignoreDeadLinks: true,
    
    themeConfig: {
        nav: [
            { text: '首页', link: '/' },
        ],
        
        outline: {
            level: [2, 3],
            label: '本页目录'
        },
        
        docFooter: {
            prev: '上一篇',
            next: '下一篇'
        },
        
        lastUpdatedText: '最后更新',
        
        search: {
            provider: 'local'
        },
        
        darkModeSwitchLabel: '主题',
        sidebarMenuLabel: '菜单',
        returnToTopLabel: '返回顶部',
        
        socialLinks: [
            { icon: 'github', link: 'https://github.com/jacksyk/algorithm' }
        ],
        
        footer: {
            message: 'Released under the MIT License.',
            copyright: 'Copyright © 2025-present'
        },

        // 更新主配置文件中的 sidebar 配置
        sidebar: [
  {
    "text": "📂 1.数组",
    "collapsed": false,
    "items": [
      {
        "text": "  📄 1.二分查找",
        "link": "/1.数组/1.二分查找"
      },
      {
        "text": "  📄 2.移除元素",
        "link": "/1.数组/2.移除元素"
      },
      {
        "text": "  📄 3.有序数组的平方",
        "link": "/1.数组/3.有序数组的平方"
      },
      {
        "text": "  📄 4.长度最小的子数组",
        "link": "/1.数组/4.长度最小的子数组"
      },
      {
        "text": "  📄 5.螺旋矩阵2",
        "link": "/1.数组/5.螺旋矩阵2"
      },
      {
        "text": "  📄 6.和为k的子数组",
        "link": "/1.数组/6.和为k的子数组"
      },
      {
        "text": "  📄 7.除数组以外的数组乘积",
        "link": "/1.数组/7.除数组以外的数组乘积"
      }
    ]
  },
  {
    "text": "📂 2.链表",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.移除链表元素",
        "link": "/2.链表/1.移除链表元素"
      },
      {
        "text": "  📄 2.设计链表",
        "link": "/2.链表/2.设计链表"
      },
      {
        "text": "  📄 3.反转链表",
        "link": "/2.链表/3.反转链表"
      },
      {
        "text": "  📄 4.两两交换链表中的节点",
        "link": "/2.链表/4.两两交换链表中的节点"
      },
      {
        "text": "  📄 5.删除链表的倒数第n个节点",
        "link": "/2.链表/5.删除链表的倒数第n个节点"
      },
      {
        "text": "  📄 6.链表相交",
        "link": "/2.链表/6.链表相交"
      },
      {
        "text": "  📄 7.环形链表",
        "link": "/2.链表/7.环形链表"
      },
      {
        "text": "  📄 8.判断链表是否有环",
        "link": "/2.链表/8.判断链表是否有环"
      },
      {
        "text": "  📄 9.合并两个有序链表",
        "link": "/2.链表/9.合并两个有序链表"
      },
      {
        "text": "  📄 10.合并k个有序链表",
        "link": "/2.链表/10.合并k个有序链表"
      },
      {
        "text": "  📄 11.反转k个一组链表",
        "link": "/2.链表/11.反转k个一组链表"
      },
      {
        "text": "  📄 12.排序链表",
        "link": "/2.链表/12.排序链表"
      }
    ]
  },
  {
    "text": "📂 3.哈希表",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.有效的字母异位词",
        "link": "/3.哈希表/1.有效的字母异位词"
      },
      {
        "text": "  📄 2.两个数组的交集",
        "link": "/3.哈希表/2.两个数组的交集"
      },
      {
        "text": "  📄 3.快乐数",
        "link": "/3.哈希表/3.快乐数"
      },
      {
        "text": "  📄 4.两数之和",
        "link": "/3.哈希表/4.两数之和"
      },
      {
        "text": "  📄 5.四数之和",
        "link": "/3.哈希表/5.四数之和"
      },
      {
        "text": "  📄 6.赎金信",
        "link": "/3.哈希表/6.赎金信"
      },
      {
        "text": "  📄 7.三数之和",
        "link": "/3.哈希表/7.三数之和"
      },
      {
        "text": "  📄 8.四数之和",
        "link": "/3.哈希表/8.四数之和"
      },
      {
        "text": "  📄 9.字符异位词分组",
        "link": "/3.哈希表/9.字符异位词分组"
      },
      {
        "text": "  📄 10.最长连续序列",
        "link": "/3.哈希表/10.最长连续序列"
      }
    ]
  },
  {
    "text": "📂 4.字符串",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.反转字符串",
        "link": "/4.字符串/1.反转字符串"
      },
      {
        "text": "  📄 2.反转字符串二",
        "link": "/4.字符串/2.反转字符串二"
      },
      {
        "text": "  📄 3.反转字符串中的单词",
        "link": "/4.字符串/3.反转字符串中的单词"
      },
      {
        "text": "  📄 4.实现strStr()",
        "link": "/4.字符串/4.实现strStr()"
      },
      {
        "text": "  📄 5.重复的子字符串",
        "link": "/4.字符串/5.重复的子字符串"
      },
      {
        "text": "  📄 6.字符串压缩",
        "link": "/4.字符串/6.字符串压缩"
      },
      {
        "text": "  📄 7.无重复字符的最长子串",
        "link": "/4.字符串/7.无重复字符的最长子串"
      },
      {
        "text": "  📄 8.找到字符串所有字母异味词",
        "link": "/4.字符串/8.找到字符串所有字母异味词"
      },
      {
        "text": "  📄 9.最小覆盖子串",
        "link": "/4.字符串/9.最小覆盖子串"
      },
      {
        "text": "  📄 10.字符串解码",
        "link": "/4.字符串/10.字符串解码"
      }
    ]
  },
  {
    "text": "📂 5.栈与队列",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.用栈实现队列",
        "link": "/5.栈与队列/1.用栈实现队列"
      },
      {
        "text": "  📄 2.用队列实现栈",
        "link": "/5.栈与队列/2.用队列实现栈"
      },
      {
        "text": "  📄 3.有效的括号",
        "link": "/5.栈与队列/3.有效的括号"
      },
      {
        "text": "  📄 4.删除字符串中的所有相邻重复项",
        "link": "/5.栈与队列/4.删除字符串中的所有相邻重复项"
      },
      {
        "text": "  📄 5.逆波兰表达式求值",
        "link": "/5.栈与队列/5.逆波兰表达式求值"
      },
      {
        "text": "  📄 6.滑动窗口求最大值.todo",
        "link": "/5.栈与队列/6.滑动窗口求最大值.todo"
      },
      {
        "text": "  📄 7.前k个高频元素.todo",
        "link": "/5.栈与队列/7.前k个高频元素.todo"
      },
      {
        "text": "  📄 8.移除无效的括号",
        "link": "/5.栈与队列/8.移除无效的括号"
      },
      {
        "text": "  📄 9.删除无效的括号",
        "link": "/5.栈与队列/9.删除无效的括号"
      }
    ]
  },
  {
    "text": "📂 6.二叉树",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.二叉树的递归遍历",
        "link": "/6.二叉树/1.二叉树的递归遍历"
      },
      {
        "text": "  📄 2.二叉树的迭代遍历",
        "link": "/6.二叉树/2.二叉树的迭代遍历"
      },
      {
        "text": "  📄 3.二叉树的层序遍历",
        "link": "/6.二叉树/3.二叉树的层序遍历"
      },
      {
        "text": "  📄 4.翻转二叉树",
        "link": "/6.二叉树/4.翻转二叉树"
      },
      {
        "text": "  📄 5.对称二叉树",
        "link": "/6.二叉树/5.对称二叉树"
      },
      {
        "text": "  📄 6.二叉树的最大深度",
        "link": "/6.二叉树/6.二叉树的最大深度"
      },
      {
        "text": "  📄 7.二叉树的最小深度",
        "link": "/6.二叉树/7.二叉树的最小深度"
      },
      {
        "text": "  📄 8.完全二叉树的节点个数",
        "link": "/6.二叉树/8.完全二叉树的节点个数"
      },
      {
        "text": "  📄 9.平衡二叉树",
        "link": "/6.二叉树/9.平衡二叉树"
      },
      {
        "text": "  📄 10.二叉树的所有路径",
        "link": "/6.二叉树/10.二叉树的所有路径"
      },
      {
        "text": "  📄 11.左叶子之和",
        "link": "/6.二叉树/11.左叶子之和"
      },
      {
        "text": "  📄 12.找树左下角的值",
        "link": "/6.二叉树/12.找树左下角的值"
      },
      {
        "text": "  📄 13.路径总和",
        "link": "/6.二叉树/13.路径总和"
      },
      {
        "text": "  📄 14.从中序与后序遍历序列构造二叉树",
        "link": "/6.二叉树/14.从中序与后序遍历序列构造二叉树"
      },
      {
        "text": "  📄 15.最大二叉树",
        "link": "/6.二叉树/15.最大二叉树"
      },
      {
        "text": "  📄 16.合并二叉树",
        "link": "/6.二叉树/16.合并二叉树"
      },
      {
        "text": "  📄 17.二叉搜索树的搜索",
        "link": "/6.二叉树/17.二叉搜索树的搜索"
      },
      {
        "text": "  📄 18.验证二叉搜索树",
        "link": "/6.二叉树/18.验证二叉搜索树"
      },
      {
        "text": "  📄 19.二叉搜索树的最小绝对值差",
        "link": "/6.二叉树/19.二叉搜索树的最小绝对值差"
      },
      {
        "text": "  📄 20.二叉搜索树的众数",
        "link": "/6.二叉树/20.二叉搜索树的众数"
      },
      {
        "text": "  📄 21.二叉树的最近公共祖先",
        "link": "/6.二叉树/21.二叉树的最近公共祖先"
      },
      {
        "text": "  📄 22.二叉搜索树的最近公共祖先",
        "link": "/6.二叉树/22.二叉搜索树的最近公共祖先"
      },
      {
        "text": "  📄 23.二叉搜索树的插入操作",
        "link": "/6.二叉树/23.二叉搜索树的插入操作"
      },
      {
        "text": "  📄 24.删除二叉搜索树的节点",
        "link": "/6.二叉树/24.删除二叉搜索树的节点"
      },
      {
        "text": "  📄 25.修剪二叉搜素树",
        "link": "/6.二叉树/25.修剪二叉搜素树"
      },
      {
        "text": "  📄 26.将有序数组转换为二叉搜索树",
        "link": "/6.二叉树/26.将有序数组转换为二叉搜索树"
      },
      {
        "text": "  📄 27.把二叉搜索树转换为累加树",
        "link": "/6.二叉树/27.把二叉搜索树转换为累加树"
      },
      {
        "text": "  📄 28.二叉树的直径",
        "link": "/6.二叉树/28.二叉树的直径"
      },
      {
        "text": "  📄 29.路径总和3",
        "link": "/6.二叉树/29.路径总和3"
      }
    ]
  },
  {
    "text": "📂 7.回溯算法",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.组合",
        "link": "/7.回溯算法/1.组合"
      },
      {
        "text": "  📄 2.组合总和三",
        "link": "/7.回溯算法/2.组合总和三"
      },
      {
        "text": "  📄 3.电话号码的字母组合",
        "link": "/7.回溯算法/3.电话号码的字母组合"
      },
      {
        "text": "  📄 4.组合总和",
        "link": "/7.回溯算法/4.组合总和"
      },
      {
        "text": "  📄 5.组合总和2",
        "link": "/7.回溯算法/5.组合总和2"
      },
      {
        "text": "  📄 6.分割回文串",
        "link": "/7.回溯算法/6.分割回文串"
      },
      {
        "text": "  📄 7.复原ip地址",
        "link": "/7.回溯算法/7.复原ip地址"
      },
      {
        "text": "  📄 8.子集",
        "link": "/7.回溯算法/8.子集"
      },
      {
        "text": "  📄 9.子集二",
        "link": "/7.回溯算法/9.子集二"
      },
      {
        "text": "  📄 10.非递减子序列",
        "link": "/7.回溯算法/10.非递减子序列"
      },
      {
        "text": "  📄 11.全排列",
        "link": "/7.回溯算法/11.全排列"
      },
      {
        "text": "  📄 12.全排列二",
        "link": "/7.回溯算法/12.全排列二"
      },
      {
        "text": "  📄 13.N皇后",
        "link": "/7.回溯算法/13.N皇后"
      },
      {
        "text": "  📄 14.单词搜索",
        "link": "/7.回溯算法/14.单词搜索"
      }
    ]
  },
  {
    "text": "📂 8.动态规划",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.斐波那契数",
        "link": "/8.动态规划/1.斐波那契数"
      },
      {
        "text": "  📄 2.爬楼梯",
        "link": "/8.动态规划/2.爬楼梯"
      },
      {
        "text": "  📄 3.使用最小花费爬楼梯",
        "link": "/8.动态规划/3.使用最小花费爬楼梯"
      },
      {
        "text": "  📄 4.不同路径",
        "link": "/8.动态规划/4.不同路径"
      },
      {
        "text": "  📄 5.不同路径2",
        "link": "/8.动态规划/5.不同路径2"
      },
      {
        "text": "  📄 6.整数拆分",
        "link": "/8.动态规划/6.整数拆分"
      },
      {
        "text": "  📄 7.不同的二叉搜索树",
        "link": "/8.动态规划/7.不同的二叉搜索树"
      },
      {
        "text": "  📄 9.分割等和子集",
        "link": "/8.动态规划/9.分割等和子集"
      },
      {
        "text": "  📄 10.最后一块石头的重量 II",
        "link": "/8.动态规划/10.最后一块石头的重量 II"
      },
      {
        "text": "  📄 11.目标和",
        "link": "/8.动态规划/11.目标和"
      },
      {
        "text": "  📄 12.一和零",
        "link": "/8.动态规划/12.一和零"
      },
      {
        "text": "  📄 14.零钱兑换二",
        "link": "/8.动态规划/14.零钱兑换二"
      },
      {
        "text": "  📄 15.组合总和四",
        "link": "/8.动态规划/15.组合总和四"
      },
      {
        "text": "  📄 16.零钱兑换",
        "link": "/8.动态规划/16.零钱兑换"
      },
      {
        "text": "  📄 17.完全平方数",
        "link": "/8.动态规划/17.完全平方数"
      },
      {
        "text": "  📄 18.单词拆分",
        "link": "/8.动态规划/18.单词拆分"
      },
      {
        "text": "  📄 19.打家劫舍",
        "link": "/8.动态规划/19.打家劫舍"
      },
      {
        "text": "  📄 20.打家劫舍二",
        "link": "/8.动态规划/20.打家劫舍二"
      },
      {
        "text": "  📄 21.打家劫舍三",
        "link": "/8.动态规划/21.打家劫舍三"
      },
      {
        "text": "  📄 22.买卖股票的最佳时机",
        "link": "/8.动态规划/22.买卖股票的最佳时机"
      },
      {
        "text": "  📄 23.买股票的最佳时机二",
        "link": "/8.动态规划/23.买股票的最佳时机二"
      },
      {
        "text": "  📄 24.买股票的最佳时机三",
        "link": "/8.动态规划/24.买股票的最佳时机三"
      },
      {
        "text": "  📄 25.买股票的最佳时机四",
        "link": "/8.动态规划/25.买股票的最佳时机四"
      },
      {
        "text": "  📄 26.买卖股票的最佳时机含冷冻期",
        "link": "/8.动态规划/26.买卖股票的最佳时机含冷冻期"
      },
      {
        "text": "  📄 27.买卖股票的最佳时机含手续费",
        "link": "/8.动态规划/27.买卖股票的最佳时机含手续费"
      },
      {
        "text": "  📄 28.最长递增子序列",
        "link": "/8.动态规划/28.最长递增子序列"
      },
      {
        "text": "  📄 29.最长连续递增子序列",
        "link": "/8.动态规划/29.最长连续递增子序列"
      },
      {
        "text": "  📄 30.最长重复子数组",
        "link": "/8.动态规划/30.最长重复子数组"
      },
      {
        "text": "  📄 31.最长公共子序列",
        "link": "/8.动态规划/31.最长公共子序列"
      },
      {
        "text": "  📄 32.数组最大乘积",
        "link": "/8.动态规划/32.数组最大乘积"
      },
      {
        "text": "  📄 32.最大子数组和",
        "link": "/8.动态规划/32.最大子数组和"
      },
      {
        "text": "  📄 33.判断子序列",
        "link": "/8.动态规划/33.判断子序列"
      },
      {
        "text": "  📄 34.不同的子序列",
        "link": "/8.动态规划/34.不同的子序列"
      },
      {
        "text": "  📄 35.两个字符串的删除操作",
        "link": "/8.动态规划/35.两个字符串的删除操作"
      },
      {
        "text": "  📄 36.编辑距离",
        "link": "/8.动态规划/36.编辑距离"
      },
      {
        "text": "  📄 37.回文子串",
        "link": "/8.动态规划/37.回文子串"
      },
      {
        "text": "  📄 38.最长回文子序列",
        "link": "/8.动态规划/38.最长回文子序列"
      }
    ]
  },
  {
    "text": "📂 9.贪心算法",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.分发饼干",
        "link": "/9.贪心算法/1.分发饼干"
      },
      {
        "text": "  📄 2.摆动序列",
        "link": "/9.贪心算法/2.摆动序列"
      },
      {
        "text": "  📄 3.最大子数组和",
        "link": "/9.贪心算法/3.最大子数组和"
      },
      {
        "text": "  📄 4.买卖股票的最佳时机 II",
        "link": "/9.贪心算法/4.买卖股票的最佳时机 II"
      },
      {
        "text": "  📄 5.跳跃游戏",
        "link": "/9.贪心算法/5.跳跃游戏"
      },
      {
        "text": "  📄 6.跳跃游戏2",
        "link": "/9.贪心算法/6.跳跃游戏2"
      },
      {
        "text": "  📄 7.k次取反化后最大化的数组和",
        "link": "/9.贪心算法/7.k次取反化后最大化的数组和"
      },
      {
        "text": "  📄 8.加油站",
        "link": "/9.贪心算法/8.加油站"
      },
      {
        "text": "  📄 9.分发糖果",
        "link": "/9.贪心算法/9.分发糖果"
      },
      {
        "text": "  📄 10.柠檬水找零",
        "link": "/9.贪心算法/10.柠檬水找零"
      },
      {
        "text": "  📄 11.根据身高重建队列",
        "link": "/9.贪心算法/11.根据身高重建队列"
      },
      {
        "text": "  📄 12.用最小数量的箭引爆气球",
        "link": "/9.贪心算法/12.用最小数量的箭引爆气球"
      },
      {
        "text": "  📄 13.无重叠区间",
        "link": "/9.贪心算法/13.无重叠区间"
      },
      {
        "text": "  📄 14.划分字母区间",
        "link": "/9.贪心算法/14.划分字母区间"
      },
      {
        "text": "  📄 15.合并区间",
        "link": "/9.贪心算法/15.合并区间"
      },
      {
        "text": "  📄 16.单调递增的数字",
        "link": "/9.贪心算法/16.单调递增的数字"
      }
    ]
  },
  {
    "text": "📂 10.前端相关手写",
    "collapsed": true,
    "items": [
      {
        "text": "📂 1.实现js原生方法",
        "collapsed": true,
        "items": [
          {
            "text": "  📄 1.filter",
            "link": "/10.前端相关手写/1.实现js原生方法/1.filter"
          },
          {
            "text": "  📄 2.flat",
            "link": "/10.前端相关手写/1.实现js原生方法/2.flat"
          },
          {
            "text": "  📄 3.forEach",
            "link": "/10.前端相关手写/1.实现js原生方法/3.forEach"
          },
          {
            "text": "  📄 4.map",
            "link": "/10.前端相关手写/1.实现js原生方法/4.map"
          },
          {
            "text": "  📄 5.reduce",
            "link": "/10.前端相关手写/1.实现js原生方法/5.reduce"
          },
          {
            "text": "  📄 6.fill",
            "link": "/10.前端相关手写/1.实现js原生方法/6.fill"
          },
          {
            "text": "  📄 7.includes",
            "link": "/10.前端相关手写/1.实现js原生方法/7.includes"
          },
          {
            "text": "  📄 8.push",
            "link": "/10.前端相关手写/1.实现js原生方法/8.push"
          },
          {
            "text": "  📄 9.unshift",
            "link": "/10.前端相关手写/1.实现js原生方法/9.unshift"
          },
          {
            "text": "  📄 10.getLeval",
            "link": "/10.前端相关手写/1.实现js原生方法/10.getLeval"
          },
          {
            "text": "  📄 11.interator",
            "link": "/10.前端相关手写/1.实现js原生方法/11.interator"
          },
          {
            "text": "  📄 12.sort.TODO",
            "link": "/10.前端相关手写/1.实现js原生方法/12.sort.TODO"
          },
          {
            "text": "  📄 13.Set",
            "link": "/10.前端相关手写/1.实现js原生方法/13.Set"
          },
          {
            "text": "  📄 14.Map",
            "link": "/10.前端相关手写/1.实现js原生方法/14.Map"
          },
          {
            "text": "  📄 15.assign",
            "link": "/10.前端相关手写/1.实现js原生方法/15.assign"
          },
          {
            "text": "  📄 16.is",
            "link": "/10.前端相关手写/1.实现js原生方法/16.is"
          },
          {
            "text": "  📄 17.json.stringify.TODO",
            "link": "/10.前端相关手写/1.实现js原生方法/17.json.stringify.TODO"
          },
          {
            "text": "  📄 18.json.parse.TODO",
            "link": "/10.前端相关手写/1.实现js原生方法/18.json.parse.TODO"
          },
          {
            "text": "  📄 19.call bind apply",
            "link": "/10.前端相关手写/1.实现js原生方法/19.call bind apply"
          },
          {
            "text": "  📄 20.typeof",
            "link": "/10.前端相关手写/1.实现js原生方法/20.typeof"
          },
          {
            "text": "  📄 21.instanceof",
            "link": "/10.前端相关手写/1.实现js原生方法/21.instanceof"
          },
          {
            "text": "  📄 22.new",
            "link": "/10.前端相关手写/1.实现js原生方法/22.new"
          },
          {
            "text": "  📄 23.trim",
            "link": "/10.前端相关手写/1.实现js原生方法/23.trim"
          }
        ]
      },
      {
        "text": "📂 2.实现Promise相关",
        "collapsed": true,
        "items": [
          {
            "text": "  📄 1.all",
            "link": "/10.前端相关手写/2.实现Promise相关/1.all"
          },
          {
            "text": "  📄 2.finally",
            "link": "/10.前端相关手写/2.实现Promise相关/2.finally"
          },
          {
            "text": "  📄 3.allSettled",
            "link": "/10.前端相关手写/2.实现Promise相关/3.allSettled"
          },
          {
            "text": "  📄 4.race",
            "link": "/10.前端相关手写/2.实现Promise相关/4.race"
          },
          {
            "text": "  📄 5.catch",
            "link": "/10.前端相关手写/2.实现Promise相关/5.catch"
          },
          {
            "text": "  📄 6.resolve",
            "link": "/10.前端相关手写/2.实现Promise相关/6.resolve"
          },
          {
            "text": "  📄 7.reject",
            "link": "/10.前端相关手写/2.实现Promise相关/7.reject"
          }
        ]
      },
      {
        "text": "📂 3.Promise场景题",
        "collapsed": true,
        "items": [
          {
            "text": "  📄 1.交通灯",
            "link": "/10.前端相关手写/3.Promise场景题/1.交通灯"
          },
          {
            "text": "  📄 2.封装一个fetch请求",
            "link": "/10.前端相关手写/3.Promise场景题/2.封装一个fetch请求"
          },
          {
            "text": "  📄 3.重复执行函数",
            "link": "/10.前端相关手写/3.Promise场景题/3.重复执行函数"
          },
          {
            "text": "  📄 4.网络请求时间限制",
            "link": "/10.前端相关手写/3.Promise场景题/4.网络请求时间限制"
          },
          {
            "text": "  📄 5.请求5s未完成就终止",
            "link": "/10.前端相关手写/3.Promise场景题/5.请求5s未完成就终止"
          },
          {
            "text": "  📄 6.实现一个sleep函数",
            "link": "/10.前端相关手写/3.Promise场景题/6.实现一个sleep函数"
          },
          {
            "text": "  📄 7.setTime实现setInterval",
            "link": "/10.前端相关手写/3.Promise场景题/7.setTime实现setInterval"
          },
          {
            "text": "  📄 8.奇怪的输出题",
            "link": "/10.前端相关手写/3.Promise场景题/8.奇怪的输出题"
          },
          {
            "text": "  📄 9.实现图片异步加载",
            "link": "/10.前端相关手写/3.Promise场景题/9.实现图片异步加载"
          },
          {
            "text": "  📄 10.封装ajax请求",
            "link": "/10.前端相关手写/3.Promise场景题/10.封装ajax请求"
          },
          {
            "text": "  📄 11.setInterval模拟setTimeOut",
            "link": "/10.前端相关手写/3.Promise场景题/11.setInterval模拟setTimeOut"
          },
          {
            "text": "  📄 12.promise如何中断后面的then",
            "link": "/10.前端相关手写/3.Promise场景题/12.promise如何中断后面的then"
          },
          {
            "text": "  📄 13.实现一个精准的计时器",
            "link": "/10.前端相关手写/3.Promise场景题/13.实现一个精准的计时器"
          },
          {
            "text": "  📄 14.一次处理2个任务",
            "link": "/10.前端相关手写/3.Promise场景题/14.一次处理2个任务"
          },
          {
            "text": "  📄 15.设计一个简单的任务队列",
            "link": "/10.前端相关手写/3.Promise场景题/15.设计一个简单的任务队列"
          },
          {
            "text": "  📄 16.实现调度器",
            "link": "/10.前端相关手写/3.Promise场景题/16.实现调度器"
          },
          {
            "text": "  📄 17.有并发限制的promiseall",
            "link": "/10.前端相关手写/3.Promise场景题/17.有并发限制的promiseall"
          },
          {
            "text": "  📄 18.实现错误重新请求，并控制重试次数",
            "link": "/10.前端相关手写/3.Promise场景题/18.实现错误重新请求，并控制重试次数"
          }
        ]
      },
      {
        "text": "📂 4.js常考手写题",
        "collapsed": true,
        "items": [
          {
            "text": "  📄 1.LRU缓存",
            "link": "/10.前端相关手写/4.js常考手写题/1.LRU缓存"
          },
          {
            "text": "  📄 2.数组转树",
            "link": "/10.前端相关手写/4.js常考手写题/2.数组转树"
          },
          {
            "text": "  📄 3.树转数组",
            "link": "/10.前端相关手写/4.js常考手写题/3.树转数组"
          },
          {
            "text": "  📄 4.函数科里化",
            "link": "/10.前端相关手写/4.js常考手写题/4.函数科里化"
          },
          {
            "text": "  📄 5.继承的几种方法",
            "link": "/10.前端相关手写/4.js常考手写题/5.继承的几种方法"
          },
          {
            "text": "  📄 6.生成唯一id",
            "link": "/10.前端相关手写/4.js常考手写题/6.生成唯一id"
          },
          {
            "text": "  📄 7.十进制转十六进制",
            "link": "/10.前端相关手写/4.js常考手写题/7.十进制转十六进制"
          },
          {
            "text": "  📄 8.最小堆",
            "link": "/10.前端相关手写/4.js常考手写题/8.最小堆"
          },
          {
            "text": "  📄 9.抽奖算法",
            "link": "/10.前端相关手写/4.js常考手写题/9.抽奖算法"
          },
          {
            "text": "  📄 10.打乱数组",
            "link": "/10.前端相关手写/4.js常考手写题/10.打乱数组"
          },
          {
            "text": "  📄 11.文件路径转换",
            "link": "/10.前端相关手写/4.js常考手写题/11.文件路径转换"
          },
          {
            "text": "  📄 12.对象路径字符串",
            "link": "/10.前端相关手写/4.js常考手写题/12.对象路径字符串"
          },
          {
            "text": "  📄 13.快速选择算法",
            "link": "/10.前端相关手写/4.js常考手写题/13.快速选择算法"
          },
          {
            "text": "  📄 14.对象字符串",
            "link": "/10.前端相关手写/4.js常考手写题/14.对象字符串"
          },
          {
            "text": "  📄 15.后端返回一个数组节点之间可以组成树-给定一个叶子节点的name，返回根节点到叶子节点的路径",
            "link": "/10.前端相关手写/4.js常考手写题/15.后端返回一个数组节点之间可以组成树-给定一个叶子节点的name，返回根节点到叶子节点的路径"
          },
          {
            "text": "  📄 16.hardman",
            "link": "/10.前端相关手写/4.js常考手写题/16.hardman"
          },
          {
            "text": "  📄 17.实现版本号排序",
            "link": "/10.前端相关手写/4.js常考手写题/17.实现版本号排序"
          },
          {
            "text": "  📄 18.将一个对象变成响应式",
            "link": "/10.前端相关手写/4.js常考手写题/18.将一个对象变成响应式"
          },
          {
            "text": "  📄 19.小于n的最大数",
            "link": "/10.前端相关手写/4.js常考手写题/19.小于n的最大数"
          }
        ]
      }
    ]
  },
  {
    "text": "📂 11.单调栈",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.每日温度",
        "link": "/11.单调栈/1.每日温度"
      },
      {
        "text": "  📄 2.下一个更大的元素",
        "link": "/11.单调栈/2.下一个更大的元素"
      },
      {
        "text": "  📄 3.下一个更大的元素2",
        "link": "/11.单调栈/3.下一个更大的元素2"
      },
      {
        "text": "  📄 4.接雨水",
        "link": "/11.单调栈/4.接雨水"
      },
      {
        "text": "  📄 5.柱状图中最大的矩形",
        "link": "/11.单调栈/5.柱状图中最大的矩形"
      }
    ]
  },
  {
    "text": "📂 12.二分搜索",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.搜索旋转数组",
        "link": "/12.二分搜索/1.搜索旋转数组"
      },
      {
        "text": "  📄 2.旋转数组的最小值",
        "link": "/12.二分搜索/2.旋转数组的最小值"
      }
    ]
  },
  {
    "text": "📂 13.双指针",
    "collapsed": true,
    "items": [
      {
        "text": "  📄 1.移动零",
        "link": "/13.双指针/1.移动零"
      },
      {
        "text": "  📄 2.盛最多水的容器",
        "link": "/13.双指针/2.盛最多水的容器"
      },
      {
        "text": "  📄 3.三数之和",
        "link": "/13.双指针/3.三数之和"
      }
    ]
  }
]
    }
})